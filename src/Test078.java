 /*=================================
   ■■■ 클래스와 인스턴스 ■■■
===================================*/

// 생성자 (Constructor)

public class Test078
{
	int x;

	/*
	기본적으로는 동일한 클래스 내에서 같은 이름을 가진 메소드를 중복선언 불가
	but, 문법적으로 허용해주는 부분이 있음
		ex) --------- +++++++++ ======== _______ 
			다 선을 그리는 동작인데, 이름 다 다르게 해야하면,
			나중에 이름 기억해내는 게 너무 복잡, 힘듦

		메소드의 기능이 같다 + 구분(식별) 가능 → 동일한 이름 허용
		==> **메소드 오버로딩(중복정의) [Method Overloading]
			후에, 메소드 오버라이딩과 비교해서 잘 알아둬야함

	
	※ 생성자의 이름은 항상 예외없이 클래스의 이름과 동일해야 하며
	   필요할 경우 인수를 받아들이는 것도 가능하고
	   같은 이름의 메소드를 정의하는 중복정의가 가능하지만
	   리턴값(반환값)은 가질 수 없다.
	  
	※ 생성자는 다른 일반 메소드처럼 호출될 수 없고,
	   new 연산자를 이용하여 객체를 생성하기 위해 호출되며,
	   각 클래스의 인스턴스인 객체를 생성한 후에
	   생성된 객체의 멤버를 초기화시키는 작업을 수행한다.
	*/

	Test078()
	{
		/*
		생성자의 기본 카테고리 : 메소드
		생성자 내부에서 다른 생성자 호출하는 것은 가능하다.
		하지만, 생성자 내부에서 ***가장 먼저*** 실행되어야 한다.

		걔가 원래 갖고 있는 코드보다 먼저, 제일 앞에 있어야 한다.
		***why? 그래야 그대로 만들고, 내가 만든걸로 덮어쓸 수 있으니까***
		내가 초기화하지 못하는 부분은 다른 생성자한테 의존하고,
		내가 할 수 있는 부분은 덮어쓰기 함

		다른 생성자를 뒤에서 해버리면, 내가 생성해도 다른 생성자 값으로 덮어쓰기 됨
		*/

		//Test078(100);
		// => 클래스 이름 직접적으로 쓰는 건 이미 문법선점 당해서 못 씀(static한테)
		this(100);

		x = 10;
		//this.x = 10;
		// 이것도 this.x = 10; 라고 써도 되고 안써도 됨
		System.out.println("인자가 없는 생성자"); 
		// 여기서 보이는 x 는 몇 개?
		// 2개 => XXXX
		// 1개이다. x = 10의 x가 전역변수인 x니까

		System.out.println("Test078 이 갖고 있는 x : " + this.x);
		System.out.println("Test078 이 갖고 있는 x : " + x);
		// 여기서는 둘 다 상관 없음
	}

	Test078(int x)
	{
		//x = x;
		// 둘 다 지역변수 x 이다.
		// 여기서 보이는 x 는 몇 개?
		// 2개이다. Test078 생성자에서 선언한 x와 전역변수 x 2개
		// 『this』 키워드 사용해서 구별해줘야 함
		this.x = x;
		// this 가 포함되어 있는 클래스의 이름으로 치환해서 이해하면 됨
		// < 논리적 해석 >
		// this.x = x;  →  Test078.x = x;
		// ==> 그냥 그럼 this 말고 Test078 로 쓰는게 더 낫지 않아?? 왜 this ??
		// 클래스 이름 직접적으로 등장시키는 건 이미 다른 쪽에서 문법 선점해서 못 씀,,,
		
		System.out.println("인자가 하나인 생성자");

		System.out.println("Test078 이 갖고 있는 x : " + this.x);	// (O)
		System.out.println("Test078 이 갖고 있는 x : " + x);		// (X)
		// ==> 이렇게 하면 지금 여기 메소드 안에 매개변수로 넘겨받은 x가 된다.

		
	}

	public static void main(String[] args)
	{
		// Test078 클래스 기반 인스턴스 생성
		Test078 ob1 = new Test078();
		Test078 ob2 = new Test078(100);

		System.out.println();
		System.out.println("main 에서 ob1.x : " + ob1.x);
		System.out.println("main 에서 ob2.x : " + ob2.x);
	}
}

// 실행 결과
/*
인자가 하나인 생성자
Test078 이 갖고 있는 x : 100
Test078 이 갖고 있는 x : 100
인자가 없는 생성자
Test078 이 갖고 있는 x : 10
Test078 이 갖고 있는 x : 10
인자가 하나인 생성자
Test078 이 갖고 있는 x : 100
Test078 이 갖고 있는 x : 100

main 에서 ob1.x : 10
main 에서 ob2.x : 100
계속하려면 아무 키나 누르십시오 . . .
*/